name: PR Review and Security Checks
on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches: ['**']

jobs:
  check-protected-files:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for protected file changes
        id: check_files
        run: |
          set -e
          
          echo "Fetching main branch..."
          git fetch origin main || {
            echo "Failed to fetch main branch"
            exit 1
          }
          
          BASE_SHA=$(git merge-base origin/main HEAD)
          
          echo "Checking for protected file changes..."
          PROTECTED_FILES=$(git diff --name-only $BASE_SHA...HEAD | grep -E "src/context/AuthContext.jsx|.github/" || true)
          
          echo "$PROTECTED_FILES" > temp_files.txt
          
          if [ -s temp_files.txt ]; then
            echo "Protected files modified:"
            cat temp_files.txt
            echo "protected_files_changed=true" >> $GITHUB_OUTPUT
            echo "protected_files<<EOF" >> $GITHUB_OUTPUT
            cat temp_files.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "No protected files modified."
            echo "protected_files_changed=false" >> $GITHUB_OUTPUT
          fi
          
          rm temp_files.txt
      
      - name: Check PR Requirements
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const author = context.payload.pull_request.user.login;
            const protectedFiles = `${{ steps.check_files.outputs.protected_files }}`;
            const isProtectedChange = '${{ steps.check_files.outputs.protected_files_changed }}' === 'true';
            
            // For protected files, only kdogdevs can modify
            if (isProtectedChange && author !== 'kdogdevs') {
              core.setFailed(`‚ùå Only @kdogdevs can modify protected files:\n${protectedFiles}`);
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.name,
                body: `‚õî This PR modifies protected files that can only be changed by @kdogdevs:\n\`\`\`\n${protectedFiles}\n\`\`\`\n\nPlease contact @kdogdevs for assistance.`
              });
              return;
            }
            
            // For regular contributors
            if (!['kdogdevs', 'davidcamick'].includes(author)) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.name,
                body: `üìù This PR requires approval from either @kdogdevs or @davidcamick before merging.`
              });
            }
            
            // For protected files by kdogdevs
            if (isProtectedChange && author === 'kdogdevs') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.name,
                body: `‚úÖ Protected files modified by authorized user (@kdogdevs):\n\`\`\`\n${protectedFiles}\n\`\`\``
              });
            }
